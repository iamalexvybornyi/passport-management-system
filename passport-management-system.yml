swagger: "2.0"
info:
  description: "This is a description of the API for the passport management system."
  version: "1.0.0"
  title: "Passport Management System"
  contact:
    email: "iamalexvybornyi@gmail.com"
host: "localhost:8080"
basePath: "/api/v1"
tags:
  - name: "person"
    description: "Person-related operations"
  - name: "passport"
    description: "Passport-related operations"
schemes:
  - "http"
paths:
  /person:
    post:
      tags:
        - "person"
      summary: "Add a new person"
      description: "Adds a new person to the system"
      operationId: "addPerson"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Person object that needs to be added to the system"
          required: true
          schema:
            $ref: "#/definitions/Person"
      responses:
        "200":
          description: "New person has been created successfully"
          schema:
            $ref: "#/definitions/Person"
        "400":
          description: "Invalid input data"
  /person/{personId}:
    get:
      tags:
        - "person"
      summary: "Get person by id"
      description: "Returns a person by their id in the system"
      operationId: "getPersonById"
      produces:
        - "application/json"
      parameters:
        - name: "personId"
          in: "path"
          description: "ID of the person to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Person information has been returned successfully"
          schema:
            $ref: "#/definitions/Person"
        "400":
          description: "Invalid ID"
        "404":
          description: "Person is not found"
    put:
      tags:
        - "person"
      summary: "Update person information by id"
      description: "Updates person information using the provided data"
      operationId: "updatePersonById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "personId"
          in: "path"
          description: "ID of the person that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Person object that will be used for updating information in the system"
          required: true
          schema:
            $ref: "#/definitions/Person"
      responses:
        "200":
          description: "Person information has been updated successfully"
          schema:
            $ref: "#/definitions/Person"
        "400":
          description: "Invalid ID"
        "404":
          description: "Person is not found"
  /person/{personId}/passports:
    get:
      tags:
        - "person"
      summary: "Get passports of a person by their id"
      description: "Returns a list of passports by the id of the person in the system"
      operationId: "getPassportsByPersonId"
      produces:
        - "application/json"
      parameters:
        - name: "personId"
          in: "path"
          description: "ID of the person for whom the passport information needs to be returned"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Passport information has been returned successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Passport"
        "400":
          description: "Invalid ID"
        "404":
          description: "Person is not found"
  /person/findByPassportNumber:
    get:
      tags:
        - "person"
      summary: "Find person by passport number"
      description: "Returns a person by their passport number"
      operationId: "findPersonByPassportNumber"
      produces:
        - "application/json"
      parameters:
        - name: "passportNumber"
          in: "query"
          description: "Passport number that will be used for searching"
          required: true
          type: "string"
      responses:
        "200":
          description: "Person information has been returned successfully"
          schema:
            $ref: "#/definitions/Person"
        "400":
          description: "Invalid passport number"
        "404":
          description: "Person is not found"
  /passport:
    post:
      tags:
        - "passport"
      summary: "Add a new passport"
      description: "Adds a new passport to the system"
      operationId: "addPassport"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Passport object that needs to be added to the system"
          required: true
          schema:
            $ref: "#/definitions/Passport"
      responses:
        "200":
          description: "New passport has been created successfully"
          schema:
            $ref: "#/definitions/Person"
        "400":
          description: "Invalid input data"
  /passport/{passportId}:
    get:
      tags:
        - "passport"
      summary: "Get passport by id"
      description: "Returns a passport by its id in the system"
      operationId: "getPassportById"
      produces:
        - "application/json"
      parameters:
        - name: "passportId"
          in: "path"
          description: "ID of the passport to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Passport information has been returned successfully"
          schema:
            $ref: "#/definitions/Passport"
        "400":
          description: "Invalid ID"
        "404":
          description: "Passport is not found"
    put:
      tags:
        - "passport"
      summary: "Update passport information by id"
      description: "Updates passport information using the provided data"
      operationId: "updatePassportById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "passportId"
          in: "path"
          description: "ID of the passport that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Passport object that will be used for updating information in the system"
          required: true
          schema:
            $ref: "#/definitions/Passport"
      responses:
        "200":
          description: "Passport information has been updated successfully"
          schema:
            $ref: "#/definitions/Passport"
        "400":
          description: "Invalid ID"
        "404":
          description: "Passport is not found"
    delete:
      tags:
        - "passport"
      summary: "Delete passport by id"
      description: "Deletes a passport by its id in the system"
      operationId: "deletePassportById"
      parameters:
        - name: "passportId"
          in: "path"
          description: "ID of the passport to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Passport information has been deleted successfully"
        "400":
          description: "Invalid ID"
        "404":
          description: "Passport is not found"
  /passport/{passportId}/deactivate:
    post:
      tags:
        - "passport"
      summary: "Deactivate passport by id"
      description: "Deactivates a passport using its id in the system by setting the isActive flag to false"
      operationId: "deactivatePassportById"
      parameters:
        - name: "passportId"
          in: "path"
          description: "ID of the passport to deactivate"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Passport has been deactivated successfully"
        "400":
          description: "Invalid ID"
        "404":
          description: "Passport is not found"
  /passport/findByGivenDateBetween:
    get:
      tags:
        - "passport"
      summary: "Get passport by given dates range"
      description: "Returns a passport usning the given dates range"
      operationId: "getPassportByGivenDateRange"
      produces:
        - "application/json"
      parameters:
        - name: "startDate"
          in: "query"
          description: "Start date of the dates range"
          required: true
          type: "string"
          format: "date"
        - name: "endDate"
          in: "query"
          description: "End date of the dates range"
          required: true
          type: "string"
          format: "date"
      responses:
        "200":
          description: "List of found passports has been returned successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Passport"
        "400":
          description: "Invalid dates range"
        "404":
          description: "Passports are not found in the given dates range"
definitions:
  Person:
    type: "object"
    required:
      - "name"
      - "birthday"
      - "birthCountry"
    properties:
      id:
        type: "integer"
        format: "int64"
      passports:
        type: "array"
        items:
          $ref: "#/definitions/Passport"
      name:
        type: "string"
        description: "Full name of the person"
        example: "Ivanov Ivan Ivanovich"
      birthday:
        type: "string"
        format: "date"
        description: "Birthday of the person"
        example: "21-06-1990"
      birthCountry:
        type: "string"
        description: "Country in which the person was born"
        enum:
          - "Russian Federation"
          - "USA"
          - "Canada"
          - "Germany"
          - "France"
  Passport:
    type: "object"
    required:
      - "number"
      - "givenDate"
      - "departmentCode"
      - "person"
      - "passportType"
    properties:
      id:
        type: "integer"
        format: "int64"
      passportNumber:
        type: "integer"
        description: "Passport number"
        example: "1234567890"
      givenDate:
        type: "string"
        format: "date"
        description: "Date on which the passport has been given to a person"
        example: "21-06-1990"
      departmentCode:
        type: "string"
        description: "Code of the department that issued the passport"
        example: "111-111"
      passportType:
        type: "string"
        description: "Passport type"
        enum:
          - "Internal"
          - "International"
      isActive:
        type: "boolean"
        description: "Flag that determines whether the passport is active or not"
      person:
        $ref: "#/definitions/Person"